{"file_contents":{"README.md":{"content":"# My Blog - Vanilla HTML/CSS/JavaScript Blog with Node.js Backend\n\nA modern, responsive blog website built with vanilla HTML, CSS, JavaScript, and Node.js backend. Features category management, topic creation, and a complete admin panel for content management.\n\n## Features\n\n- **Home Page**: Website overview with recent posts and categories preview\n- **Categories Page**: Horizontal category buttons with topic filtering\n- **Dynamic Topic Pages**: Auto-generated pages for each topic\n- **Admin Panel**: Complete content management system\n- **Responsive Design**: Mobile-friendly layout\n- **JSON Storage**: File-based data persistence\n- **Category Management**: Add new categories and organize topics\n- **Topic Creation**: Rich content creation with category assignment\n\n## Project Structure\n\n","size_bytes":793},"replit.md":{"content":"# Overview\n\nThis is a vanilla HTML/CSS/JavaScript blog application with a Node.js backend. The system provides a complete content management platform featuring dynamic topic creation, category-based organization, and an admin panel for content management. The blog uses a file-based JSON storage system for data persistence and generates dynamic pages for topics and categories.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Pure vanilla approach**: Uses vanilla HTML, CSS, and JavaScript without any frontend frameworks\n- **Static file serving**: Express serves static HTML files and assets from the `public` and `posts` directories\n- **Client-side routing**: Dynamic page generation handled through JavaScript with API calls to the backend\n- **Responsive design**: Mobile-first CSS approach with grid layouts and media queries\n\n## Backend Architecture  \n- **Express.js server**: Lightweight Node.js web server handling API routes and static file serving\n- **RESTful API design**: JSON endpoints for data operations (`/api/data`, etc.)\n- **File-based storage**: Uses JSON files for data persistence instead of a traditional database\n- **Auto-initialization**: Server ensures required data files exist on startup\n\n## Data Storage\n- **JSON file system**: Categories and topics stored in `categories.json` file\n- **File-based persistence**: No database required - all data stored as structured JSON files\n- **Auto-creation**: Data files are created automatically if they don't exist during server startup\n\n## Content Management\n- **Dynamic topic creation**: Topics can be created through the admin panel with category assignment\n- **Category management**: Add and organize content categories dynamically\n- **Admin interface**: Complete content management system accessible via `/admin` route\n\n## Application Structure\n- **Multi-page application**: Separate HTML files for home, categories, and admin functionality\n- **Shared styling**: Common CSS file used across all pages for consistent design\n- **Modular JavaScript**: Utility functions in `main.js` for notifications, date formatting, and UI interactions\n\n# External Dependencies\n\n## Core Dependencies\n- **Express.js (^5.1.0)**: Web application framework for Node.js serving as the backend server\n\n## Built-in Node.js Modules\n- **fs**: File system operations for reading/writing JSON data files\n- **path**: File path utilities for serving static files and managing routes\n\n## No External Services\n- The application is completely self-contained with no external API integrations or third-party services\n- No database connections required - uses local file storage\n- No authentication services or user management systems implemented","size_bytes":2768},"server.js":{"content":"const express = require('express');\nconst fs = require('fs');\nconst path = require('path');\nconst multer = require('multer');\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Middleware\n// *** SIZE LIMIT CONFIG: Change these values to modify request size limits ***\napp.use(express.json({ limit: '100mb' })); // JSON payload limit - change '100mb' to increase\napp.use(express.urlencoded({ extended: true, limit: '100mb' })); // Form data limit - change '100mb' to increase\napp.use(express.static('public'));\napp.use('/posts', express.static('posts'));\n\n// Utility function to ensure data files exist\nfunction ensureDataFiles() {\n    const categoriesFile = 'categories.json';\n    const uploadsDir = path.join(__dirname, 'public', 'uploads');\n    \n    // Create uploads directory if it doesn't exist\n    if (!fs.existsSync(uploadsDir)) {\n        fs.mkdirSync(uploadsDir, { recursive: true });\n    }\n    \n    // Create categories.json if it doesn't exist\n    if (!fs.existsSync(categoriesFile)) {\n        const initialCategories = {\n            categories: ['General', 'Technology', 'Lifestyle'],\n            topics: []\n        };\n        fs.writeFileSync(categoriesFile, JSON.stringify(initialCategories, null, 2));\n    }\n}\n\n// Configure multer for file uploads\nconst storage = multer.diskStorage({\n    destination: function (req, file, cb) {\n        const uploadsDir = path.join(__dirname, 'public', 'uploads');\n        cb(null, uploadsDir);\n    },\n    filename: function (req, file, cb) {\n        // Generate unique filename with timestamp\n        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n        const ext = path.extname(file.originalname);\n        cb(null, 'img-' + uniqueSuffix + ext);\n    }\n});\n\n// *** IMAGE UPLOAD SIZE CONFIG: Change fileSize value to modify image upload limits ***\nconst upload = multer({ \n    storage: storage,\n    limits: {\n        fileSize: 20 * 1024 * 1024 // *** CHANGE THIS: 20MB per image limit - modify number before * 1024 * 1024 ***\n    },\n    fileFilter: function (req, file, cb) {\n        // Check if file is an image\n        if (file.mimetype.startsWith('image/')) {\n            cb(null, true);\n        } else {\n            cb(new Error('Only image files are allowed!'), false);\n        }\n    }\n});\n\n// Initialize data files on startup\nensureDataFiles();\n\n// Routes\n\n// Home page\napp.get('/', (req, res) => {\n    res.sendFile(path.join(__dirname, 'public', 'index.html'));\n});\n\n// Categories page\napp.get('/categories', (req, res) => {\n    res.sendFile(path.join(__dirname, 'posts', 'categories.html'));\n});\n\n// Admin page\napp.get('/admin', (req, res) => {\n    res.sendFile(path.join(__dirname, 'posts', 'admin.html'));\n});\n\n// API endpoint to get all categories and topics\napp.get('/api/data', (req, res) => {\n    try {\n        const data = JSON.parse(fs.readFileSync('categories.json', 'utf8'));\n        res.json(data);\n    } catch (error) {\n        console.error('Error reading data:', error);\n        res.status(500).json({ error: 'Failed to load data' });\n    }\n});\n\n// API endpoint to add new category\napp.post('/api/categories', (req, res) => {\n    try {\n        const { name } = req.body;\n        \n        if (!name || name.trim() === '') {\n            return res.status(400).json({ error: 'Category name is required' });\n        }\n\n        const data = JSON.parse(fs.readFileSync('categories.json', 'utf8'));\n        \n        // Check if category already exists\n        if (data.categories.includes(name.trim())) {\n            return res.status(400).json({ error: 'Category already exists' });\n        }\n\n        data.categories.push(name.trim());\n        fs.writeFileSync('categories.json', JSON.stringify(data, null, 2));\n        \n        res.json({ success: true, message: 'Category added successfully' });\n    } catch (error) {\n        console.error('Error adding category:', error);\n        res.status(500).json({ error: 'Failed to add category' });\n    }\n});\n\n// API endpoint to add new topic\napp.post('/api/topics', (req, res) => {\n    try {\n        const { title, content, category } = req.body;\n        \n        if (!title || !content || !category) {\n            return res.status(400).json({ error: 'Title, content, and category are required' });\n        }\n\n        // *** TOPIC CONTENT SIZE CONFIG: Change this value to modify topic content limits ***\n        // Validate content size (much smaller now since images are file references)\n        if (content.length > 500000) { // *** CHANGE THIS: 500KB limit for HTML content - modify this number ***\n            return res.status(400).json({ error: 'Content is too large. Please reduce text content.' });\n        }\n\n        const data = JSON.parse(fs.readFileSync('categories.json', 'utf8'));\n        \n        // Check if category exists\n        if (!data.categories.includes(category)) {\n            return res.status(400).json({ error: 'Selected category does not exist' });\n        }\n\n        const newTopic = {\n            id: Date.now().toString(),\n            title: title.trim(),\n            content: content.trim(),\n            category: category,\n            createdAt: new Date().toISOString(),\n            slug: title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')\n        };\n\n        data.topics.push(newTopic);\n        fs.writeFileSync('categories.json', JSON.stringify(data, null, 2));\n        \n        res.json({ success: true, message: 'Topic added successfully', topic: newTopic });\n    } catch (error) {\n        console.error('Error adding topic:', error);\n        \n        // More specific error handling\n        if (error.message && error.message.includes('JSON')) {\n            res.status(400).json({ error: 'Invalid content format. Please try again without special characters.' });\n        } else if (error.code === 'ENOSPC') {\n            res.status(500).json({ error: 'Not enough storage space. Please reduce content size.' });\n        } else {\n            res.status(500).json({ error: 'Failed to add topic. Please try again.' });\n        }\n    }\n});\n\n// API endpoint to upload images\napp.post('/api/upload-image', upload.single('image'), (req, res) => {\n    try {\n        if (!req.file) {\n            return res.status(400).json({ error: 'No image file provided' });\n        }\n\n        // Return the URL path to the uploaded image\n        const imageUrl = `/uploads/${req.file.filename}`;\n        \n        res.json({ \n            success: true, \n            imageUrl: imageUrl,\n            message: 'Image uploaded successfully'\n        });\n    } catch (error) {\n        console.error('Error uploading image:', error);\n        res.status(500).json({ error: 'Failed to upload image' });\n    }\n});\n\n// API endpoint to get specific topic\napp.get('/api/topics/:id', (req, res) => {\n    try {\n        const { id } = req.params;\n        const data = JSON.parse(fs.readFileSync('categories.json', 'utf8'));\n        \n        const topic = data.topics.find(t => t.id === id || t.slug === id);\n        \n        if (!topic) {\n            return res.status(404).json({ error: 'Topic not found' });\n        }\n        \n        res.json(topic);\n    } catch (error) {\n        console.error('Error getting topic:', error);\n        res.status(500).json({ error: 'Failed to load topic' });\n    }\n});\n\n// API endpoint to delete topic\napp.delete('/api/topics/:id', (req, res) => {\n    try {\n        const { id } = req.params;\n        const data = JSON.parse(fs.readFileSync('categories.json', 'utf8'));\n        \n        const topicIndex = data.topics.findIndex(t => t.id === id);\n        \n        if (topicIndex === -1) {\n            return res.status(404).json({ error: 'Topic not found' });\n        }\n        \n        const deletedTopic = data.topics.splice(topicIndex, 1)[0];\n        fs.writeFileSync('categories.json', JSON.stringify(data, null, 2));\n        \n        res.json({ \n            success: true, \n            message: 'Topic deleted successfully',\n            deletedTopic: deletedTopic\n        });\n    } catch (error) {\n        console.error('Error deleting topic:', error);\n        res.status(500).json({ error: 'Failed to delete topic' });\n    }\n});\n\n// API endpoint to delete category\napp.delete('/api/categories/:name', (req, res) => {\n    try {\n        const categoryName = decodeURIComponent(req.params.name);\n        const data = JSON.parse(fs.readFileSync('categories.json', 'utf8'));\n        \n        const categoryIndex = data.categories.indexOf(categoryName);\n        \n        if (categoryIndex === -1) {\n            return res.status(404).json({ error: 'Category not found' });\n        }\n        \n        // Check if any topics use this category\n        const topicsUsingCategory = data.topics.filter(t => t.category === categoryName);\n        \n        if (topicsUsingCategory.length > 0) {\n            return res.status(400).json({ \n                error: `Cannot delete category \"${categoryName}\". ${topicsUsingCategory.length} topic(s) are using this category.`,\n                topicsCount: topicsUsingCategory.length\n            });\n        }\n        \n        data.categories.splice(categoryIndex, 1);\n        fs.writeFileSync('categories.json', JSON.stringify(data, null, 2));\n        \n        res.json({ \n            success: true, \n            message: 'Category deleted successfully',\n            deletedCategory: categoryName\n        });\n    } catch (error) {\n        console.error('Error deleting category:', error);\n        res.status(500).json({ error: 'Failed to delete category' });\n    }\n});\n\n// Dynamic topic page route\napp.get('/topic/:id', (req, res) => {\n    try {\n        const { id } = req.params;\n        const data = JSON.parse(fs.readFileSync('categories.json', 'utf8'));\n        \n        const topic = data.topics.find(t => t.id === id || t.slug === id);\n        \n        if (!topic) {\n            return res.status(404).send(`\n                <!DOCTYPE html>\n                <html>\n                <head>\n                    <title>Topic Not Found</title>\n                    <link rel=\"stylesheet\" href=\"/style.css\">\n                </head>\n                <body>\n                    <nav class=\"navbar\">\n                        <div class=\"nav-container\">\n                            <h1><a href=\"/\">My Blog</a></h1>\n                            <ul class=\"nav-menu\">\n                                <li><a href=\"/\">Home</a></li>\n                                <li><a href=\"/categories\">Categories</a></li>\n                                <li><a href=\"/admin\">Admin</a></li>\n                            </ul>\n                        </div>\n                    </nav>\n                    <div class=\"container\">\n                        <div class=\"error-page\">\n                            <h2>Topic Not Found</h2>\n                            <p>The requested topic does not exist.</p>\n                            <a href=\"/categories\" class=\"btn btn-primary\">Browse Topics</a>\n                        </div>\n                    </div>\n                </body>\n                </html>\n            `);\n        }\n        \n        const topicHtml = `\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>${topic.title} - My Blog</title>\n                <link rel=\"stylesheet\" href=\"/style.css\">\n            </head>\n            <body>\n                <nav class=\"navbar\">\n                    <div class=\"nav-container\">\n                        <h1><a href=\"/\">My Blog</a></h1>\n                        <ul class=\"nav-menu\">\n                            <li><a href=\"/\">Home</a></li>\n                            <li><a href=\"/categories\">Categories</a></li>\n                            <li><a href=\"/admin\">Admin</a></li>\n                        </ul>\n                    </div>\n                </nav>\n                \n                <div class=\"container\">\n                    <article class=\"topic-article\">\n                        <header class=\"topic-header\">\n                            <h1>${topic.title}</h1>\n                            <div class=\"topic-meta\">\n                                <span class=\"category-tag\">${topic.category}</span>\n                                <span class=\"date\">${new Date(topic.createdAt).toLocaleDateString()}</span>\n                            </div>\n                        </header>\n                        \n                        <div class=\"topic-content\">\n                            ${topic.content}\n                        </div>\n                        \n                        <footer class=\"topic-footer\">\n                            <a href=\"/categories\" class=\"btn btn-secondary\">← Back to Categories</a>\n                        </footer>\n                    </article>\n                </div>\n            </body>\n            </html>\n        `;\n        \n        res.send(topicHtml);\n    } catch (error) {\n        console.error('Error loading topic page:', error);\n        res.status(500).send('Internal Server Error');\n    }\n});\n\n// Start server\napp.listen(PORT, '0.0.0.0', () => {\n    console.log(`Server running on http://0.0.0.0:${PORT}`);\n});\n","size_bytes":13207},"public/main.js":{"content":"// Utility functions for the blog application\n\n// Show notification messages\nfunction showNotification(message, type = 'info') {\n    // Remove existing notifications\n    const existing = document.querySelector('.notification');\n    if (existing) {\n        existing.remove();\n    }\n\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.textContent = message;\n\n    document.body.appendChild(notification);\n\n    // Auto remove after 5 seconds\n    setTimeout(() => {\n        if (notification.parentNode) {\n            notification.remove();\n        }\n    }, 5000);\n\n    // Remove on click\n    notification.addEventListener('click', () => {\n        notification.remove();\n    });\n}\n\n// Format date for display\nfunction formatDate(dateString) {\n    const options = { \n        year: 'numeric', \n        month: 'long', \n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n    };\n    return new Date(dateString).toLocaleDateString('en-US', options);\n}\n\n// Create slug from title\nfunction createSlug(title) {\n    return title\n        .toLowerCase()\n        .replace(/[^a-z0-9]+/g, '-')\n        .replace(/(^-|-$)/g, '');\n}\n\n// Mobile navigation toggle\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Add mobile menu functionality\n    const navMenu = document.querySelector('.nav-menu');\n    \n    if (navMenu) {\n        // Create mobile menu button\n        const mobileMenuBtn = document.createElement('button');\n        mobileMenuBtn.className = 'mobile-menu-btn';\n        mobileMenuBtn.innerHTML = '☰';\n        mobileMenuBtn.setAttribute('aria-label', 'Toggle menu');\n\n        const navContainer = document.querySelector('.nav-container');\n        navContainer.appendChild(mobileMenuBtn);\n\n        // Toggle mobile menu\n        mobileMenuBtn.addEventListener('click', function() {\n            navMenu.classList.toggle('nav-menu-active');\n            mobileMenuBtn.classList.toggle('active');\n        });\n\n        // Close menu when clicking outside\n        document.addEventListener('click', function(e) {\n            if (!navContainer.contains(e.target)) {\n                navMenu.classList.remove('nav-menu-active');\n                mobileMenuBtn.classList.remove('active');\n            }\n        });\n\n        // Close menu on window resize if screen becomes large\n        window.addEventListener('resize', function() {\n            if (window.innerWidth > 768) {\n                navMenu.classList.remove('nav-menu-active');\n                mobileMenuBtn.classList.remove('active');\n            }\n        });\n    }\n});\n\n// API helper functions\nconst API = {\n    async get(url) {\n        try {\n            const response = await fetch(url);\n            const data = await response.json();\n            \n            if (!response.ok) {\n                throw new Error(data.error || 'Request failed');\n            }\n            \n            return data;\n        } catch (error) {\n            console.error('API GET Error:', error);\n            throw error;\n        }\n    },\n\n    async post(url, data) {\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data)\n            });\n\n            const result = await response.json();\n            \n            if (!response.ok) {\n                throw new Error(result.error || 'Request failed');\n            }\n            \n            return result;\n        } catch (error) {\n            console.error('API POST Error:', error);\n            throw error;\n        }\n    }\n};\n\n// Form validation helpers\nconst Validation = {\n    required(value, fieldName) {\n        if (!value || value.trim() === '') {\n            throw new Error(`${fieldName} is required`);\n        }\n        return true;\n    },\n\n    minLength(value, min, fieldName) {\n        if (value.length < min) {\n            throw new Error(`${fieldName} must be at least ${min} characters long`);\n        }\n        return true;\n    },\n\n    maxLength(value, max, fieldName) {\n        if (value.length > max) {\n            throw new Error(`${fieldName} must be no more than ${max} characters long`);\n        }\n        return true;\n    }\n};\n\n// Loading state helper\nfunction setLoadingState(element, isLoading = true) {\n    if (isLoading) {\n        element.disabled = true;\n        element.dataset.originalText = element.textContent;\n        element.textContent = 'Loading...';\n    } else {\n        element.disabled = false;\n        element.textContent = element.dataset.originalText || element.textContent;\n    }\n}\n\n// Error handling helper\nfunction handleError(error, fallbackMessage = 'An error occurred') {\n    const message = error.message || fallbackMessage;\n    showNotification(message, 'error');\n    console.error('Error:', error);\n}\n\n// Success handling helper\nfunction handleSuccess(message) {\n    showNotification(message, 'success');\n}\n","size_bytes":5044},"public/style.css":{"content":"/* Reset and base styles */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n    line-height: 1.6;\n    color: #333;\n    background-color: #f8f9fa;\n}\n\n/* Container */\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 20px;\n}\n\n/* Navigation */\n.navbar {\n    background: #fff;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    position: sticky;\n    top: 0;\n    z-index: 1000;\n}\n\n.nav-container {\n    max-width: 1200px;\n    margin: 0 auto;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1rem 20px;\n}\n\n.navbar h1 a {\n    text-decoration: none;\n    color: #2c3e50;\n    font-size: 1.8rem;\n    font-weight: 700;\n}\n\n.nav-menu {\n    display: flex;\n    list-style: none;\n    gap: 2rem;\n}\n\n.nav-menu a {\n    text-decoration: none;\n    color: #555;\n    font-weight: 500;\n    transition: color 0.3s ease;\n    padding: 0.5rem 0;\n}\n\n.nav-menu a:hover,\n.nav-menu a.active {\n    color: #3498db;\n}\n\n.mobile-menu-btn {\n    display: none;\n    background: none;\n    border: none;\n    font-size: 1.5rem;\n    cursor: pointer;\n    color: #333;\n}\n\n/* Hero Section */\n.hero {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    padding: 4rem 0;\n    text-align: center;\n}\n\n.hero-content h1 {\n    font-size: 3rem;\n    margin-bottom: 1rem;\n    font-weight: 700;\n}\n\n.hero-content p {\n    font-size: 1.2rem;\n    margin-bottom: 2rem;\n    opacity: 0.9;\n    max-width: 600px;\n    margin-left: auto;\n    margin-right: auto;\n}\n\n/* Buttons */\n.btn {\n    display: inline-block;\n    padding: 12px 24px;\n    border: none;\n    border-radius: 6px;\n    text-decoration: none;\n    font-weight: 600;\n    font-size: 1rem;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    text-align: center;\n}\n\n.btn-primary {\n    background-color: #3498db;\n    color: white;\n}\n\n.btn-primary:hover {\n    background-color: #2980b9;\n    transform: translateY(-2px);\n}\n\n.btn-secondary {\n    background-color: #95a5a6;\n    color: white;\n}\n\n.btn-secondary:hover {\n    background-color: #7f8c8d;\n}\n\n.btn-success {\n    background-color: #27ae60;\n    color: white;\n}\n\n.btn-success:hover {\n    background-color: #229954;\n}\n\n.btn-outline {\n    background-color: transparent;\n    border: 2px solid #3498db;\n    color: #3498db;\n}\n\n.btn-outline:hover {\n    background-color: #3498db;\n    color: white;\n}\n\n/* Sections */\n.about-section,\n.recent-posts,\n.categories-preview {\n    padding: 3rem 0;\n}\n\n.about-section {\n    background: white;\n}\n\n.about-content {\n    max-width: 800px;\n    margin: 0 auto;\n    text-align: center;\n}\n\n.about-content h2 {\n    font-size: 2.5rem;\n    margin-bottom: 1.5rem;\n    color: #2c3e50;\n}\n\n.about-content p {\n    font-size: 1.1rem;\n    margin-bottom: 2rem;\n    color: #555;\n}\n\n.feature-list {\n    list-style: none;\n    max-width: 500px;\n    margin: 0 auto;\n    text-align: left;\n}\n\n.feature-list li {\n    padding: 0.5rem 0;\n    position: relative;\n    padding-left: 2rem;\n    color: #555;\n}\n\n.feature-list li:before {\n    content: \"✓\";\n    position: absolute;\n    left: 0;\n    color: #27ae60;\n    font-weight: bold;\n}\n\n/* Posts Grid */\n.posts-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n    gap: 2rem;\n    margin-top: 2rem;\n}\n\n.post-card {\n    background: white;\n    border-radius: 8px;\n    padding: 1.5rem;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.post-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 4px 20px rgba(0,0,0,0.15);\n}\n\n.post-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-bottom: 1rem;\n}\n\n.post-header h3 {\n    flex: 1;\n    margin-right: 1rem;\n}\n\n.post-header h3 a {\n    text-decoration: none;\n    color: #2c3e50;\n    font-size: 1.3rem;\n    font-weight: 600;\n}\n\n.post-header h3 a:hover {\n    color: #3498db;\n}\n\n.post-excerpt {\n    color: #666;\n    margin-bottom: 1rem;\n    line-height: 1.6;\n}\n\n.post-meta {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 0.9rem;\n    color: #888;\n}\n\n/* Categories */\n.categories-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 1.5rem;\n    margin-top: 2rem;\n}\n\n.category-card {\n    background: white;\n    border-radius: 8px;\n    padding: 2rem;\n    text-align: center;\n    text-decoration: none;\n    color: #333;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n    transition: all 0.3s ease;\n}\n\n.category-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 4px 20px rgba(0,0,0,0.15);\n    color: #3498db;\n}\n\n.category-card h3 {\n    font-size: 1.5rem;\n    margin-bottom: 0.5rem;\n}\n\n.category-card p {\n    color: #666;\n}\n\n/* Category Tags */\n.category-tag {\n    background-color: #3498db;\n    color: white;\n    padding: 0.3rem 0.8rem;\n    border-radius: 20px;\n    font-size: 0.8rem;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n/* Category Buttons (for categories page) */\n.category-buttons {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 1rem;\n    margin: 2rem 0;\n    justify-content: center;\n}\n\n.category-btn {\n    padding: 0.8rem 1.5rem;\n    border: 2px solid #3498db;\n    background: white;\n    color: #3498db;\n    border-radius: 25px;\n    cursor: pointer;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    text-decoration: none;\n}\n\n.category-btn:hover,\n.category-btn.active {\n    background: #3498db;\n    color: white;\n    transform: translateY(-2px);\n}\n\n/* Forms */\n.form-container {\n    background: white;\n    padding: 2rem;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n    max-width: 600px;\n    margin: 2rem auto;\n}\n\n.form-group {\n    margin-bottom: 1.5rem;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 0.5rem;\n    font-weight: 600;\n    color: #333;\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n    width: 100%;\n    padding: 0.8rem;\n    border: 2px solid #ddd;\n    border-radius: 4px;\n    font-size: 1rem;\n    transition: border-color 0.3s ease;\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n    outline: none;\n    border-color: #3498db;\n}\n\n.form-group textarea {\n    resize: vertical;\n    min-height: 150px;\n}\n\n/* Topic Page */\n.topic-article {\n    background: white;\n    padding: 3rem;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n    margin: 2rem 0;\n}\n\n.topic-header {\n    margin-bottom: 2rem;\n    border-bottom: 2px solid #eee;\n    padding-bottom: 1rem;\n}\n\n.topic-header h1 {\n    font-size: 2.5rem;\n    color: #2c3e50;\n    margin-bottom: 1rem;\n}\n\n.topic-meta {\n    display: flex;\n    gap: 1rem;\n    align-items: center;\n}\n\n.topic-content {\n    font-size: 1.1rem;\n    line-height: 1.8;\n    color: #444;\n    margin-bottom: 2rem;\n}\n\n/* Rich content styling for TinyMCE output */\n.topic-content h1,\n.topic-content h2,\n.topic-content h3,\n.topic-content h4,\n.topic-content h5,\n.topic-content h6 {\n    color: #2c3e50;\n    margin-top: 2rem;\n    margin-bottom: 1rem;\n}\n\n.topic-content h1 { font-size: 2rem; }\n.topic-content h2 { font-size: 1.75rem; }\n.topic-content h3 { font-size: 1.5rem; }\n.topic-content h4 { font-size: 1.25rem; }\n\n.topic-content p {\n    margin-bottom: 1rem;\n}\n\n.topic-content ul,\n.topic-content ol {\n    margin-bottom: 1rem;\n    padding-left: 2rem;\n}\n\n.topic-content li {\n    margin-bottom: 0.5rem;\n}\n\n.topic-content img {\n    max-width: 100%;\n    height: auto;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n    margin: 1rem 0;\n}\n\n.topic-content blockquote {\n    border-left: 4px solid #3498db;\n    margin: 1.5rem 0;\n    padding: 1rem 1.5rem;\n    background-color: #f8f9fa;\n    font-style: italic;\n}\n\n.topic-content code {\n    background-color: #f4f4f4;\n    padding: 2px 6px;\n    border-radius: 3px;\n    font-family: 'Courier New', monospace;\n    font-size: 0.9rem;\n}\n\n.topic-content pre {\n    background-color: #f4f4f4;\n    padding: 1rem;\n    border-radius: 5px;\n    overflow-x: auto;\n    margin: 1rem 0;\n}\n\n.topic-content pre code {\n    background: none;\n    padding: 0;\n}\n\n.topic-content a {\n    color: #3498db;\n    text-decoration: none;\n}\n\n.topic-content a:hover {\n    text-decoration: underline;\n}\n\n.topic-content table {\n    width: 100%;\n    border-collapse: collapse;\n    margin: 1rem 0;\n}\n\n.topic-content table th,\n.topic-content table td {\n    border: 1px solid #ddd;\n    padding: 0.75rem;\n    text-align: left;\n}\n\n.topic-content table th {\n    background-color: #f8f9fa;\n    font-weight: 600;\n}\n\n.topic-footer {\n    border-top: 2px solid #eee;\n    padding-top: 1rem;\n}\n\n/* Empty States */\n.empty-state {\n    text-align: center;\n    padding: 3rem;\n    color: #666;\n}\n\n.empty-state h3 {\n    font-size: 1.5rem;\n    margin-bottom: 1rem;\n    color: #999;\n}\n\n.empty-state a {\n    color: #3498db;\n    text-decoration: none;\n}\n\n.empty-state a:hover {\n    text-decoration: underline;\n}\n\n/* Error Page */\n.error-page {\n    text-align: center;\n    padding: 3rem;\n}\n\n.error-page h2 {\n    font-size: 2rem;\n    color: #e74c3c;\n    margin-bottom: 1rem;\n}\n\n.error-page p {\n    font-size: 1.1rem;\n    margin-bottom: 2rem;\n    color: #666;\n}\n\n/* Notifications */\n.notification {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    padding: 1rem 1.5rem;\n    border-radius: 4px;\n    color: white;\n    font-weight: 600;\n    cursor: pointer;\n    z-index: 10000;\n    animation: slideIn 0.3s ease;\n}\n\n.notification-success {\n    background-color: #27ae60;\n}\n\n.notification-error {\n    background-color: #e74c3c;\n}\n\n.notification-info {\n    background-color: #3498db;\n}\n\n@keyframes slideIn {\n    from {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n/* Footer */\n.footer {\n    background: #2c3e50;\n    color: white;\n    text-align: center;\n    padding: 2rem 0;\n    margin-top: 3rem;\n}\n\n.footer-content p {\n    opacity: 0.8;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .mobile-menu-btn {\n        display: block;\n    }\n\n    .nav-menu {\n        position: absolute;\n        top: 100%;\n        left: 0;\n        width: 100%;\n        background: white;\n        flex-direction: column;\n        padding: 1rem;\n        box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        transform: translateY(-100%);\n        opacity: 0;\n        visibility: hidden;\n        transition: all 0.3s ease;\n        gap: 0;\n    }\n\n    .nav-menu.nav-menu-active {\n        transform: translateY(0);\n        opacity: 1;\n        visibility: visible;\n    }\n\n    .nav-menu li {\n        margin: 0.5rem 0;\n    }\n\n    .hero-content h1 {\n        font-size: 2rem;\n    }\n\n    .hero-content p {\n        font-size: 1rem;\n    }\n\n    .category-buttons {\n        justify-content: flex-start;\n        overflow-x: auto;\n        padding: 0.5rem 0;\n    }\n\n    .category-btn {\n        white-space: nowrap;\n        flex-shrink: 0;\n    }\n\n    .posts-grid {\n        grid-template-columns: 1fr;\n        gap: 1rem;\n    }\n\n    .categories-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .topic-article {\n        padding: 1.5rem;\n    }\n\n    .topic-header h1 {\n        font-size: 2rem;\n    }\n\n    .topic-meta {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 0.5rem;\n    }\n\n    .form-container {\n        margin: 1rem;\n        padding: 1.5rem;\n    }\n\n    .about-content h2 {\n        font-size: 2rem;\n    }\n\n    .notification {\n        left: 20px;\n        right: 20px;\n    }\n}\n\n@media (max-width: 480px) {\n    .container {\n        padding: 0 15px;\n    }\n\n    .hero {\n        padding: 2rem 0;\n    }\n\n    .hero-content h1 {\n        font-size: 1.5rem;\n    }\n\n    .about-section,\n    .recent-posts,\n    .categories-preview {\n        padding: 2rem 0;\n    }\n}\n","size_bytes":11858}}}